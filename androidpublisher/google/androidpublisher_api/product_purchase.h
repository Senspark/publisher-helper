// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_PRODUCT_PURCHASE_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_PRODUCT_PURCHASE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * A ProductPurchase resource indicates the status of a user's inapp product
 * purchase.
 *
 * @ingroup DataObject
 */
class ProductPurchase : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ProductPurchase* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProductPurchase(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProductPurchase(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ProductPurchase();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::ProductPurchase</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::ProductPurchase");
  }

  /**
   * Determine if the '<code>consumptionState</code>' attribute was set.
   *
   * @return true if the '<code>consumptionState</code>' attribute was set.
   */
  bool has_consumption_state() const {
    return Storage().isMember("consumptionState");
  }

  /**
   * Clears the '<code>consumptionState</code>' attribute.
   */
  void clear_consumption_state() {
    MutableStorage()->removeMember("consumptionState");
  }


  /**
   * Get the value of the '<code>consumptionState</code>' attribute.
   */
  int32 get_consumption_state() const {
    const Json::Value& storage = Storage("consumptionState");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>consumptionState</code>' attribute.
   *
   * The consumption state of the inapp product. Possible values are:
   * - Yet to be consumed
   * - Consumed.
   *
   * @param[in] value The new value.
   */
  void set_consumption_state(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("consumptionState"));
  }

  /**
   * Determine if the '<code>developerPayload</code>' attribute was set.
   *
   * @return true if the '<code>developerPayload</code>' attribute was set.
   */
  bool has_developer_payload() const {
    return Storage().isMember("developerPayload");
  }

  /**
   * Clears the '<code>developerPayload</code>' attribute.
   */
  void clear_developer_payload() {
    MutableStorage()->removeMember("developerPayload");
  }


  /**
   * Get the value of the '<code>developerPayload</code>' attribute.
   */
  const StringPiece get_developer_payload() const {
    const Json::Value& v = Storage("developerPayload");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>developerPayload</code>' attribute.
   *
   * A developer-specified string that contains supplemental information about
   * an order.
   *
   * @param[in] value The new value.
   */
  void set_developer_payload(const StringPiece& value) {
    *MutableStorage("developerPayload") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This kind represents an inappPurchase object in the androidpublisher
   * service.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>orderId</code>' attribute was set.
   *
   * @return true if the '<code>orderId</code>' attribute was set.
   */
  bool has_order_id() const {
    return Storage().isMember("orderId");
  }

  /**
   * Clears the '<code>orderId</code>' attribute.
   */
  void clear_order_id() {
    MutableStorage()->removeMember("orderId");
  }


  /**
   * Get the value of the '<code>orderId</code>' attribute.
   */
  const StringPiece get_order_id() const {
    const Json::Value& v = Storage("orderId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>orderId</code>' attribute.
   *
   * The order id associated with the purchase of the inapp product.
   *
   * @param[in] value The new value.
   */
  void set_order_id(const StringPiece& value) {
    *MutableStorage("orderId") = value.data();
  }

  /**
   * Determine if the '<code>purchaseState</code>' attribute was set.
   *
   * @return true if the '<code>purchaseState</code>' attribute was set.
   */
  bool has_purchase_state() const {
    return Storage().isMember("purchaseState");
  }

  /**
   * Clears the '<code>purchaseState</code>' attribute.
   */
  void clear_purchase_state() {
    MutableStorage()->removeMember("purchaseState");
  }


  /**
   * Get the value of the '<code>purchaseState</code>' attribute.
   */
  int32 get_purchase_state() const {
    const Json::Value& storage = Storage("purchaseState");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>purchaseState</code>' attribute.
   *
   * The purchase state of the order. Possible values are:
   * - Purchased
   * - Cancelled.
   *
   * @param[in] value The new value.
   */
  void set_purchase_state(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("purchaseState"));
  }

  /**
   * Determine if the '<code>purchaseTimeMillis</code>' attribute was set.
   *
   * @return true if the '<code>purchaseTimeMillis</code>' attribute was set.
   */
  bool has_purchase_time_millis() const {
    return Storage().isMember("purchaseTimeMillis");
  }

  /**
   * Clears the '<code>purchaseTimeMillis</code>' attribute.
   */
  void clear_purchase_time_millis() {
    MutableStorage()->removeMember("purchaseTimeMillis");
  }


  /**
   * Get the value of the '<code>purchaseTimeMillis</code>' attribute.
   */
  int64 get_purchase_time_millis() const {
    const Json::Value& storage = Storage("purchaseTimeMillis");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>purchaseTimeMillis</code>' attribute.
   *
   * The time the product was purchased, in milliseconds since the epoch (Jan 1,
   * 1970).
   *
   * @param[in] value The new value.
   */
  void set_purchase_time_millis(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("purchaseTimeMillis"));
  }

 private:
  void operator=(const ProductPurchase&);
};  // ProductPurchase
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_PRODUCT_PURCHASE_H_
