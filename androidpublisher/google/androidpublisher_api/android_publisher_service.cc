// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/androidpublisher_api/android_publisher_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/util/status.h"

#include "google/androidpublisher_api/apk.h"
#include "google/androidpublisher_api/apk_listing.h"
#include "google/androidpublisher_api/apk_listings_list_response.h"
#include "google/androidpublisher_api/apks_add_externally_hosted_request.h"
#include "google/androidpublisher_api/apks_add_externally_hosted_response.h"
#include "google/androidpublisher_api/apks_list_response.h"
#include "google/androidpublisher_api/app_details.h"
#include "google/androidpublisher_api/app_edit.h"
#include "google/androidpublisher_api/deobfuscation_files_upload_response.h"
#include "google/androidpublisher_api/entitlements_list_response.h"
#include "google/androidpublisher_api/expansion_file.h"
#include "google/androidpublisher_api/expansion_files_upload_response.h"
#include "google/androidpublisher_api/images_delete_all_response.h"
#include "google/androidpublisher_api/images_list_response.h"
#include "google/androidpublisher_api/images_upload_response.h"
#include "google/androidpublisher_api/in_app_product.h"
#include "google/androidpublisher_api/inappproducts_batch_request.h"
#include "google/androidpublisher_api/inappproducts_batch_response.h"
#include "google/androidpublisher_api/inappproducts_list_response.h"
#include "google/androidpublisher_api/listing.h"
#include "google/androidpublisher_api/listings_list_response.h"
#include "google/androidpublisher_api/product_purchase.h"
#include "google/androidpublisher_api/review.h"
#include "google/androidpublisher_api/reviews_list_response.h"
#include "google/androidpublisher_api/reviews_reply_request.h"
#include "google/androidpublisher_api/reviews_reply_response.h"
#include "google/androidpublisher_api/subscription_purchase.h"
#include "google/androidpublisher_api/subscription_purchases_defer_request.h"
#include "google/androidpublisher_api/subscription_purchases_defer_response.h"
#include "google/androidpublisher_api/testers.h"
#include "google/androidpublisher_api/track.h"
#include "google/androidpublisher_api/tracks_list_response.h"
#include "google/androidpublisher_api/voided_purchases_list_response.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_androidpublisher_api {
using namespace googleapis;
const char AndroidPublisherService::googleapis_API_NAME[] = {"androidpublisher"};

const char AndroidPublisherService::googleapis_API_VERSION[] = {"v2"};

const char AndroidPublisherService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.4"};


const char AndroidPublisherService::SCOPES::ANDROIDPUBLISHER[] = {"https://www.googleapis.com/auth/androidpublisher"};
AndroidPublisherServiceBaseRequest::AndroidPublisherServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

AndroidPublisherServiceBaseRequest::~AndroidPublisherServiceBaseRequest() {
}

util::Status AndroidPublisherServiceBaseRequest::AppendVariable(
    const StringPiece& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void AndroidPublisherServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}



// Standard constructor.
EditsResource_CommitMethod::EditsResource_CommitMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}:commit"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_CommitMethod::~EditsResource_CommitMethod() {
}


util::Status EditsResource_CommitMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_DeleteMethod::EditsResource_DeleteMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_DeleteMethod::~EditsResource_DeleteMethod() {
}


util::Status EditsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_GetMethod::EditsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_GetMethod::~EditsResource_GetMethod() {
}


util::Status EditsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_InsertMethod::EditsResource_InsertMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const AppEdit& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits"),
      package_name_(package_name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_InsertMethod::~EditsResource_InsertMethod() {
}


util::Status EditsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ValidateMethod::EditsResource_ValidateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}:validate"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_ValidateMethod::~EditsResource_ValidateMethod() {
}


util::Status EditsResource_ValidateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
EditsResource_ApklistingsResource_DeleteMethod::EditsResource_ApklistingsResource_DeleteMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      language_(language.as_string()) {
}

// Standard destructor.
EditsResource_ApklistingsResource_DeleteMethod::~EditsResource_ApklistingsResource_DeleteMethod() {
}


util::Status EditsResource_ApklistingsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApklistingsResource_DeleteallMethod::EditsResource_ApklistingsResource_DeleteallMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code) {
}

// Standard destructor.
EditsResource_ApklistingsResource_DeleteallMethod::~EditsResource_ApklistingsResource_DeleteallMethod() {
}


util::Status EditsResource_ApklistingsResource_DeleteallMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApklistingsResource_GetMethod::EditsResource_ApklistingsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      language_(language.as_string()) {
}

// Standard destructor.
EditsResource_ApklistingsResource_GetMethod::~EditsResource_ApklistingsResource_GetMethod() {
}


util::Status EditsResource_ApklistingsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApklistingsResource_ListMethod::EditsResource_ApklistingsResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code) {
}

// Standard destructor.
EditsResource_ApklistingsResource_ListMethod::~EditsResource_ApklistingsResource_ListMethod() {
}


util::Status EditsResource_ApklistingsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApklistingsResource_PatchMethod::EditsResource_ApklistingsResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language, const ApkListing& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      language_(language.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ApklistingsResource_PatchMethod::~EditsResource_ApklistingsResource_PatchMethod() {
}


util::Status EditsResource_ApklistingsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApklistingsResource_UpdateMethod::EditsResource_ApklistingsResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language, const ApkListing& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      language_(language.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ApklistingsResource_UpdateMethod::~EditsResource_ApklistingsResource_UpdateMethod() {
}


util::Status EditsResource_ApklistingsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_ApksResource_AddexternallyhostedMethod::EditsResource_ApksResource_AddexternallyhostedMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const ApksAddExternallyHostedRequest& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}/apks/externallyHosted"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ApksResource_AddexternallyhostedMethod::~EditsResource_ApksResource_AddexternallyhostedMethod() {
}


util::Status EditsResource_ApksResource_AddexternallyhostedMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ApksResource_ListMethod::EditsResource_ApksResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/apks"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_ApksResource_ListMethod::~EditsResource_ApksResource_ListMethod() {
}


util::Status EditsResource_ApksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
EditsResource_ApksResource_UploadMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks", true);


// static
const client::MediaUploadSpec
EditsResource_ApksResource_UploadMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks", true);



// Standard constructor.
EditsResource_ApksResource_UploadMethod::EditsResource_ApksResource_UploadMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}/apks"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{packageName}/edits/{editId}/apks"));
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
EditsResource_ApksResource_UploadMethod::~EditsResource_ApksResource_UploadMethod() {
}


util::Status EditsResource_ApksResource_UploadMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// static
const client::MediaUploadSpec
EditsResource_DeobfuscationfilesResource_UploadMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}", true);


// static
const client::MediaUploadSpec
EditsResource_DeobfuscationfilesResource_UploadMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}", true);



// Standard constructor.
EditsResource_DeobfuscationfilesResource_UploadMethod::EditsResource_DeobfuscationfilesResource_UploadMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& deobfuscation_file_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      deobfuscation_file_type_(deobfuscation_file_type.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}"));
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
EditsResource_DeobfuscationfilesResource_UploadMethod::~EditsResource_DeobfuscationfilesResource_UploadMethod() {
}


util::Status EditsResource_DeobfuscationfilesResource_UploadMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "deobfuscationFileType") {
    client::UriTemplate::AppendValue(
        deobfuscation_file_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_DetailsResource_GetMethod::EditsResource_DetailsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/details"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_DetailsResource_GetMethod::~EditsResource_DetailsResource_GetMethod() {
}


util::Status EditsResource_DetailsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_DetailsResource_PatchMethod::EditsResource_DetailsResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const AppDetails& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/details"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_DetailsResource_PatchMethod::~EditsResource_DetailsResource_PatchMethod() {
}


util::Status EditsResource_DetailsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_DetailsResource_UpdateMethod::EditsResource_DetailsResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const AppDetails& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/details"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_DetailsResource_UpdateMethod::~EditsResource_DetailsResource_UpdateMethod() {
}


util::Status EditsResource_DetailsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_ExpansionfilesResource_GetMethod::EditsResource_ExpansionfilesResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      expansion_file_type_(expansion_file_type.as_string()) {
}

// Standard destructor.
EditsResource_ExpansionfilesResource_GetMethod::~EditsResource_ExpansionfilesResource_GetMethod() {
}


util::Status EditsResource_ExpansionfilesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "expansionFileType") {
    client::UriTemplate::AppendValue(
        expansion_file_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ExpansionfilesResource_PatchMethod::EditsResource_ExpansionfilesResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const ExpansionFile& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      expansion_file_type_(expansion_file_type.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ExpansionfilesResource_PatchMethod::~EditsResource_ExpansionfilesResource_PatchMethod() {
}


util::Status EditsResource_ExpansionfilesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "expansionFileType") {
    client::UriTemplate::AppendValue(
        expansion_file_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ExpansionfilesResource_UpdateMethod::EditsResource_ExpansionfilesResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const ExpansionFile& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      expansion_file_type_(expansion_file_type.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ExpansionfilesResource_UpdateMethod::~EditsResource_ExpansionfilesResource_UpdateMethod() {
}


util::Status EditsResource_ExpansionfilesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "expansionFileType") {
    client::UriTemplate::AppendValue(
        expansion_file_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
EditsResource_ExpansionfilesResource_UploadMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}", true);


// static
const client::MediaUploadSpec
EditsResource_ExpansionfilesResource_UploadMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}", true);



// Standard constructor.
EditsResource_ExpansionfilesResource_UploadMethod::EditsResource_ExpansionfilesResource_UploadMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      apk_version_code_(apk_version_code),
      expansion_file_type_(expansion_file_type.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}"));
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
EditsResource_ExpansionfilesResource_UploadMethod::~EditsResource_ExpansionfilesResource_UploadMethod() {
}


util::Status EditsResource_ExpansionfilesResource_UploadMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "apkVersionCode") {
    client::UriTemplate::AppendValue(
        apk_version_code_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "expansionFileType") {
    client::UriTemplate::AppendValue(
        expansion_file_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_ImagesResource_DeleteMethod::EditsResource_ImagesResource_DeleteMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type, const StringPiece& image_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()),
      image_type_(image_type.as_string()),
      image_id_(image_id.as_string()) {
}

// Standard destructor.
EditsResource_ImagesResource_DeleteMethod::~EditsResource_ImagesResource_DeleteMethod() {
}


util::Status EditsResource_ImagesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "imageType") {
    client::UriTemplate::AppendValue(
        image_type_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "imageId") {
    client::UriTemplate::AppendValue(
        image_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ImagesResource_DeleteallMethod::EditsResource_ImagesResource_DeleteallMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/listings/{language}/{imageType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()),
      image_type_(image_type.as_string()) {
}

// Standard destructor.
EditsResource_ImagesResource_DeleteallMethod::~EditsResource_ImagesResource_DeleteallMethod() {
}


util::Status EditsResource_ImagesResource_DeleteallMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "imageType") {
    client::UriTemplate::AppendValue(
        image_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ImagesResource_ListMethod::EditsResource_ImagesResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/listings/{language}/{imageType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()),
      image_type_(image_type.as_string()) {
}

// Standard destructor.
EditsResource_ImagesResource_ListMethod::~EditsResource_ImagesResource_ListMethod() {
}


util::Status EditsResource_ImagesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "imageType") {
    client::UriTemplate::AppendValue(
        image_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
EditsResource_ImagesResource_UploadMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}", true);


// static
const client::MediaUploadSpec
EditsResource_ImagesResource_UploadMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}", true);



// Standard constructor.
EditsResource_ImagesResource_UploadMethod::EditsResource_ImagesResource_UploadMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/edits/{editId}/listings/{language}/{imageType}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()),
      image_type_(image_type.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{packageName}/edits/{editId}/listings/{language}/{imageType}"));
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
EditsResource_ImagesResource_UploadMethod::~EditsResource_ImagesResource_UploadMethod() {
}


util::Status EditsResource_ImagesResource_UploadMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "imageType") {
    client::UriTemplate::AppendValue(
        image_type_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_ListingsResource_DeleteMethod::EditsResource_ListingsResource_DeleteMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()) {
}

// Standard destructor.
EditsResource_ListingsResource_DeleteMethod::~EditsResource_ListingsResource_DeleteMethod() {
}


util::Status EditsResource_ListingsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ListingsResource_DeleteallMethod::EditsResource_ListingsResource_DeleteallMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/edits/{editId}/listings"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_ListingsResource_DeleteallMethod::~EditsResource_ListingsResource_DeleteallMethod() {
}


util::Status EditsResource_ListingsResource_DeleteallMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ListingsResource_GetMethod::EditsResource_ListingsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()) {
}

// Standard destructor.
EditsResource_ListingsResource_GetMethod::~EditsResource_ListingsResource_GetMethod() {
}


util::Status EditsResource_ListingsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ListingsResource_ListMethod::EditsResource_ListingsResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/listings"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_ListingsResource_ListMethod::~EditsResource_ListingsResource_ListMethod() {
}


util::Status EditsResource_ListingsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ListingsResource_PatchMethod::EditsResource_ListingsResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const Listing& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ListingsResource_PatchMethod::~EditsResource_ListingsResource_PatchMethod() {
}


util::Status EditsResource_ListingsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_ListingsResource_UpdateMethod::EditsResource_ListingsResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const Listing& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/listings/{language}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      language_(language.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_ListingsResource_UpdateMethod::~EditsResource_ListingsResource_UpdateMethod() {
}


util::Status EditsResource_ListingsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "language") {
    client::UriTemplate::AppendValue(
        language_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_TestersResource_GetMethod::EditsResource_TestersResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/testers/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
}

// Standard destructor.
EditsResource_TestersResource_GetMethod::~EditsResource_TestersResource_GetMethod() {
}


util::Status EditsResource_TestersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_TestersResource_PatchMethod::EditsResource_TestersResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Testers& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/testers/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_TestersResource_PatchMethod::~EditsResource_TestersResource_PatchMethod() {
}


util::Status EditsResource_TestersResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_TestersResource_UpdateMethod::EditsResource_TestersResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Testers& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/testers/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_TestersResource_UpdateMethod::~EditsResource_TestersResource_UpdateMethod() {
}


util::Status EditsResource_TestersResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
EditsResource_TracksResource_GetMethod::EditsResource_TracksResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/tracks/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
}

// Standard destructor.
EditsResource_TracksResource_GetMethod::~EditsResource_TracksResource_GetMethod() {
}


util::Status EditsResource_TracksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_TracksResource_ListMethod::EditsResource_TracksResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/edits/{editId}/tracks"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()) {
}

// Standard destructor.
EditsResource_TracksResource_ListMethod::~EditsResource_TracksResource_ListMethod() {
}


util::Status EditsResource_TracksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_TracksResource_PatchMethod::EditsResource_TracksResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Track& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/edits/{editId}/tracks/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_TracksResource_PatchMethod::~EditsResource_TracksResource_PatchMethod() {
}


util::Status EditsResource_TracksResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EditsResource_TracksResource_UpdateMethod::EditsResource_TracksResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Track& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/edits/{editId}/tracks/{track}"),
      package_name_(package_name.as_string()),
      edit_id_(edit_id.as_string()),
      track_(track.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
EditsResource_TracksResource_UpdateMethod::~EditsResource_TracksResource_UpdateMethod() {
}


util::Status EditsResource_TracksResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "editId") {
    client::UriTemplate::AppendValue(
        edit_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "track") {
    client::UriTemplate::AppendValue(
        track_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
EntitlementsResource_ListMethod::EntitlementsResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/entitlements"),
      package_name_(package_name.as_string()),
      _have_max_results_(false),
      _have_product_id_(false),
      _have_start_index_(false),
      _have_token_(false) {
}

// Standard destructor.
EntitlementsResource_ListMethod::~EntitlementsResource_ListMethod() {
}

util::Status EntitlementsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_product_id_) {
    StrAppend(target, sep, "productId=",
              client::CppValueToEscapedUrlValue(
                product_id_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "startIndex=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_token_) {
    StrAppend(target, sep, "token=",
              client::CppValueToEscapedUrlValue(
                token_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status EntitlementsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_BatchMethod::InappproductsResource_BatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const InappproductsBatchRequest& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "inappproducts/batch") {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InappproductsResource_BatchMethod::~InappproductsResource_BatchMethod() {
}


// Standard constructor.
InappproductsResource_DeleteMethod::InappproductsResource_DeleteMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{packageName}/inappproducts/{sku}"),
      package_name_(package_name.as_string()),
      sku_(sku.as_string()) {
}

// Standard destructor.
InappproductsResource_DeleteMethod::~InappproductsResource_DeleteMethod() {
}


util::Status InappproductsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sku") {
    client::UriTemplate::AppendValue(
        sku_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_GetMethod::InappproductsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/inappproducts/{sku}"),
      package_name_(package_name.as_string()),
      sku_(sku.as_string()) {
}

// Standard destructor.
InappproductsResource_GetMethod::~InappproductsResource_GetMethod() {
}


util::Status InappproductsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sku") {
    client::UriTemplate::AppendValue(
        sku_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_InsertMethod::InappproductsResource_InsertMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const InAppProduct& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/inappproducts"),
      package_name_(package_name.as_string()),
      _have_auto_convert_missing_prices_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InappproductsResource_InsertMethod::~InappproductsResource_InsertMethod() {
}

util::Status InappproductsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_auto_convert_missing_prices_) {
    StrAppend(target, sep, "autoConvertMissingPrices=",
              client::CppValueToEscapedUrlValue(
                auto_convert_missing_prices_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InappproductsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_ListMethod::InappproductsResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/inappproducts"),
      package_name_(package_name.as_string()),
      _have_max_results_(false),
      _have_start_index_(false),
      _have_token_(false) {
}

// Standard destructor.
InappproductsResource_ListMethod::~InappproductsResource_ListMethod() {
}

util::Status InappproductsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "startIndex=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_token_) {
    StrAppend(target, sep, "token=",
              client::CppValueToEscapedUrlValue(
                token_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InappproductsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_PatchMethod::InappproductsResource_PatchMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku, const InAppProduct& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{packageName}/inappproducts/{sku}"),
      package_name_(package_name.as_string()),
      sku_(sku.as_string()),
      _have_auto_convert_missing_prices_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InappproductsResource_PatchMethod::~InappproductsResource_PatchMethod() {
}

util::Status InappproductsResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_auto_convert_missing_prices_) {
    StrAppend(target, sep, "autoConvertMissingPrices=",
              client::CppValueToEscapedUrlValue(
                auto_convert_missing_prices_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InappproductsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sku") {
    client::UriTemplate::AppendValue(
        sku_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InappproductsResource_UpdateMethod::InappproductsResource_UpdateMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku, const InAppProduct& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{packageName}/inappproducts/{sku}"),
      package_name_(package_name.as_string()),
      sku_(sku.as_string()),
      _have_auto_convert_missing_prices_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InappproductsResource_UpdateMethod::~InappproductsResource_UpdateMethod() {
}

util::Status InappproductsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_auto_convert_missing_prices_) {
    StrAppend(target, sep, "autoConvertMissingPrices=",
              client::CppValueToEscapedUrlValue(
                auto_convert_missing_prices_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InappproductsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sku") {
    client::UriTemplate::AppendValue(
        sku_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
PurchasesResource_ProductsResource_GetMethod::PurchasesResource_ProductsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& product_id, const StringPiece& token)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/purchases/products/{productId}/tokens/{token}"),
      package_name_(package_name.as_string()),
      product_id_(product_id.as_string()),
      token_(token.as_string()) {
}

// Standard destructor.
PurchasesResource_ProductsResource_GetMethod::~PurchasesResource_ProductsResource_GetMethod() {
}


util::Status PurchasesResource_ProductsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "productId") {
    client::UriTemplate::AppendValue(
        product_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
PurchasesResource_SubscriptionsResource_CancelMethod::PurchasesResource_SubscriptionsResource_CancelMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel"),
      package_name_(package_name.as_string()),
      subscription_id_(subscription_id.as_string()),
      token_(token.as_string()) {
}

// Standard destructor.
PurchasesResource_SubscriptionsResource_CancelMethod::~PurchasesResource_SubscriptionsResource_CancelMethod() {
}


util::Status PurchasesResource_SubscriptionsResource_CancelMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subscriptionId") {
    client::UriTemplate::AppendValue(
        subscription_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PurchasesResource_SubscriptionsResource_DeferMethod::PurchasesResource_SubscriptionsResource_DeferMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token, const SubscriptionPurchasesDeferRequest& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer"),
      package_name_(package_name.as_string()),
      subscription_id_(subscription_id.as_string()),
      token_(token.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
PurchasesResource_SubscriptionsResource_DeferMethod::~PurchasesResource_SubscriptionsResource_DeferMethod() {
}


util::Status PurchasesResource_SubscriptionsResource_DeferMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subscriptionId") {
    client::UriTemplate::AppendValue(
        subscription_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PurchasesResource_SubscriptionsResource_GetMethod::PurchasesResource_SubscriptionsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}"),
      package_name_(package_name.as_string()),
      subscription_id_(subscription_id.as_string()),
      token_(token.as_string()) {
}

// Standard destructor.
PurchasesResource_SubscriptionsResource_GetMethod::~PurchasesResource_SubscriptionsResource_GetMethod() {
}


util::Status PurchasesResource_SubscriptionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subscriptionId") {
    client::UriTemplate::AppendValue(
        subscription_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PurchasesResource_SubscriptionsResource_RefundMethod::PurchasesResource_SubscriptionsResource_RefundMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund"),
      package_name_(package_name.as_string()),
      subscription_id_(subscription_id.as_string()),
      token_(token.as_string()) {
}

// Standard destructor.
PurchasesResource_SubscriptionsResource_RefundMethod::~PurchasesResource_SubscriptionsResource_RefundMethod() {
}


util::Status PurchasesResource_SubscriptionsResource_RefundMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subscriptionId") {
    client::UriTemplate::AppendValue(
        subscription_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PurchasesResource_SubscriptionsResource_RevokeMethod::PurchasesResource_SubscriptionsResource_RevokeMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke"),
      package_name_(package_name.as_string()),
      subscription_id_(subscription_id.as_string()),
      token_(token.as_string()) {
}

// Standard destructor.
PurchasesResource_SubscriptionsResource_RevokeMethod::~PurchasesResource_SubscriptionsResource_RevokeMethod() {
}


util::Status PurchasesResource_SubscriptionsResource_RevokeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subscriptionId") {
    client::UriTemplate::AppendValue(
        subscription_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "token") {
    client::UriTemplate::AppendValue(
        token_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
PurchasesResource_VoidedpurchasesResource_ListMethod::PurchasesResource_VoidedpurchasesResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/purchases/voidedpurchases"),
      package_name_(package_name.as_string()),
      _have_end_time_(false),
      _have_max_results_(false),
      _have_start_index_(false),
      _have_start_time_(false),
      _have_token_(false) {
}

// Standard destructor.
PurchasesResource_VoidedpurchasesResource_ListMethod::~PurchasesResource_VoidedpurchasesResource_ListMethod() {
}

util::Status PurchasesResource_VoidedpurchasesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_end_time_) {
    StrAppend(target, sep, "endTime=",
              client::CppValueToEscapedUrlValue(
                end_time_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "startIndex=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_start_time_) {
    StrAppend(target, sep, "startTime=",
              client::CppValueToEscapedUrlValue(
                start_time_));
    sep = "&";
  }
  if (_have_token_) {
    StrAppend(target, sep, "token=",
              client::CppValueToEscapedUrlValue(
                token_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PurchasesResource_VoidedpurchasesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ReviewsResource_GetMethod::ReviewsResource_GetMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& review_id)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/reviews/{reviewId}"),
      package_name_(package_name.as_string()),
      review_id_(review_id.as_string()),
      _have_translation_language_(false) {
}

// Standard destructor.
ReviewsResource_GetMethod::~ReviewsResource_GetMethod() {
}

util::Status ReviewsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_translation_language_) {
    StrAppend(target, sep, "translationLanguage=",
              client::CppValueToEscapedUrlValue(
                translation_language_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ReviewsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "reviewId") {
    client::UriTemplate::AppendValue(
        review_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ReviewsResource_ListMethod::ReviewsResource_ListMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{packageName}/reviews"),
      package_name_(package_name.as_string()),
      _have_max_results_(false),
      _have_start_index_(false),
      _have_token_(false),
      _have_translation_language_(false) {
}

// Standard destructor.
ReviewsResource_ListMethod::~ReviewsResource_ListMethod() {
}

util::Status ReviewsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "startIndex=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_token_) {
    StrAppend(target, sep, "token=",
              client::CppValueToEscapedUrlValue(
                token_));
    sep = "&";
  }
  if (_have_translation_language_) {
    StrAppend(target, sep, "translationLanguage=",
              client::CppValueToEscapedUrlValue(
                translation_language_));
    sep = "&";
  }
  return AndroidPublisherServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ReviewsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ReviewsResource_ReplyMethod::ReviewsResource_ReplyMethod(
    const AndroidPublisherService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& review_id, const ReviewsReplyRequest& __request_content__)
    : AndroidPublisherServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{packageName}/reviews/{reviewId}:reply"),
      package_name_(package_name.as_string()),
      review_id_(review_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ReviewsResource_ReplyMethod::~ReviewsResource_ReplyMethod() {
}


util::Status ReviewsResource_ReplyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "packageName") {
    client::UriTemplate::AppendValue(
        package_name_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "reviewId") {
    client::UriTemplate::AppendValue(
        review_id_, config, target);
    return client::StatusOk();
  }
  return AndroidPublisherServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



AndroidPublisherService::AndroidPublisherService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "androidpublisher/v2/applications/", transport), edits_(this), entitlements_(this), inappproducts_(this), purchases_(this), reviews_(this) {
}

AndroidPublisherService::~AndroidPublisherService() {
}


AndroidPublisherService::EditsResource::EditsResource(AndroidPublisherService* service)
  : service_(service), apklistings_(service), apks_(service), deobfuscationfiles_(service), details_(service), expansionfiles_(service), images_(service), listings_(service), testers_(service), tracks_(service) {
}



EditsResource_CommitMethod* AndroidPublisherService::EditsResource::NewCommitMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_CommitMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_DeleteMethod* AndroidPublisherService::EditsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_DeleteMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_GetMethod* AndroidPublisherService::EditsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_GetMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_InsertMethod* AndroidPublisherService::EditsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const AppEdit& __request_content__) const {
  return new EditsResource_InsertMethod(service_, _credential_, package_name, __request_content__);
}


EditsResource_ValidateMethod* AndroidPublisherService::EditsResource::NewValidateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_ValidateMethod(service_, _credential_, package_name, edit_id);
}



AndroidPublisherService::EditsResource::ApklistingsResource::ApklistingsResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_ApklistingsResource_DeleteMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language) const {
  return new EditsResource_ApklistingsResource_DeleteMethod(service_, _credential_, package_name, edit_id, apk_version_code, language);
}


EditsResource_ApklistingsResource_DeleteallMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewDeleteallMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code) const {
  return new EditsResource_ApklistingsResource_DeleteallMethod(service_, _credential_, package_name, edit_id, apk_version_code);
}


EditsResource_ApklistingsResource_GetMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language) const {
  return new EditsResource_ApklistingsResource_GetMethod(service_, _credential_, package_name, edit_id, apk_version_code, language);
}


EditsResource_ApklistingsResource_ListMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code) const {
  return new EditsResource_ApklistingsResource_ListMethod(service_, _credential_, package_name, edit_id, apk_version_code);
}


EditsResource_ApklistingsResource_PatchMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language, const ApkListing& __request_content__) const {
  return new EditsResource_ApklistingsResource_PatchMethod(service_, _credential_, package_name, edit_id, apk_version_code, language, __request_content__);
}


EditsResource_ApklistingsResource_UpdateMethod* AndroidPublisherService::EditsResource::ApklistingsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& language, const ApkListing& __request_content__) const {
  return new EditsResource_ApklistingsResource_UpdateMethod(service_, _credential_, package_name, edit_id, apk_version_code, language, __request_content__);
}

AndroidPublisherService::EditsResource::ApksResource::ApksResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_ApksResource_AddexternallyhostedMethod* AndroidPublisherService::EditsResource::ApksResource::NewAddexternallyhostedMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const ApksAddExternallyHostedRequest& __request_content__) const {
  return new EditsResource_ApksResource_AddexternallyhostedMethod(service_, _credential_, package_name, edit_id, __request_content__);
}


EditsResource_ApksResource_ListMethod* AndroidPublisherService::EditsResource::ApksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_ApksResource_ListMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_ApksResource_UploadMethod* AndroidPublisherService::EditsResource::ApksResource::NewUploadMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new EditsResource_ApksResource_UploadMethod(service_, _credential_, package_name, edit_id, _media_content_type_, _media_content_reader_);
}

AndroidPublisherService::EditsResource::DeobfuscationfilesResource::DeobfuscationfilesResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_DeobfuscationfilesResource_UploadMethod* AndroidPublisherService::EditsResource::DeobfuscationfilesResource::NewUploadMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& deobfuscation_file_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new EditsResource_DeobfuscationfilesResource_UploadMethod(service_, _credential_, package_name, edit_id, apk_version_code, deobfuscation_file_type, _media_content_type_, _media_content_reader_);
}

AndroidPublisherService::EditsResource::DetailsResource::DetailsResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_DetailsResource_GetMethod* AndroidPublisherService::EditsResource::DetailsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_DetailsResource_GetMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_DetailsResource_PatchMethod* AndroidPublisherService::EditsResource::DetailsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const AppDetails& __request_content__) const {
  return new EditsResource_DetailsResource_PatchMethod(service_, _credential_, package_name, edit_id, __request_content__);
}


EditsResource_DetailsResource_UpdateMethod* AndroidPublisherService::EditsResource::DetailsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const AppDetails& __request_content__) const {
  return new EditsResource_DetailsResource_UpdateMethod(service_, _credential_, package_name, edit_id, __request_content__);
}

AndroidPublisherService::EditsResource::ExpansionfilesResource::ExpansionfilesResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_ExpansionfilesResource_GetMethod* AndroidPublisherService::EditsResource::ExpansionfilesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type) const {
  return new EditsResource_ExpansionfilesResource_GetMethod(service_, _credential_, package_name, edit_id, apk_version_code, expansion_file_type);
}


EditsResource_ExpansionfilesResource_PatchMethod* AndroidPublisherService::EditsResource::ExpansionfilesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const ExpansionFile& __request_content__) const {
  return new EditsResource_ExpansionfilesResource_PatchMethod(service_, _credential_, package_name, edit_id, apk_version_code, expansion_file_type, __request_content__);
}


EditsResource_ExpansionfilesResource_UpdateMethod* AndroidPublisherService::EditsResource::ExpansionfilesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const ExpansionFile& __request_content__) const {
  return new EditsResource_ExpansionfilesResource_UpdateMethod(service_, _credential_, package_name, edit_id, apk_version_code, expansion_file_type, __request_content__);
}


EditsResource_ExpansionfilesResource_UploadMethod* AndroidPublisherService::EditsResource::ExpansionfilesResource::NewUploadMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const int32& apk_version_code, const StringPiece& expansion_file_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new EditsResource_ExpansionfilesResource_UploadMethod(service_, _credential_, package_name, edit_id, apk_version_code, expansion_file_type, _media_content_type_, _media_content_reader_);
}

AndroidPublisherService::EditsResource::ImagesResource::ImagesResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_ImagesResource_DeleteMethod* AndroidPublisherService::EditsResource::ImagesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type, const StringPiece& image_id) const {
  return new EditsResource_ImagesResource_DeleteMethod(service_, _credential_, package_name, edit_id, language, image_type, image_id);
}


EditsResource_ImagesResource_DeleteallMethod* AndroidPublisherService::EditsResource::ImagesResource::NewDeleteallMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type) const {
  return new EditsResource_ImagesResource_DeleteallMethod(service_, _credential_, package_name, edit_id, language, image_type);
}


EditsResource_ImagesResource_ListMethod* AndroidPublisherService::EditsResource::ImagesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type) const {
  return new EditsResource_ImagesResource_ListMethod(service_, _credential_, package_name, edit_id, language, image_type);
}


EditsResource_ImagesResource_UploadMethod* AndroidPublisherService::EditsResource::ImagesResource::NewUploadMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const StringPiece& image_type, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new EditsResource_ImagesResource_UploadMethod(service_, _credential_, package_name, edit_id, language, image_type, _media_content_type_, _media_content_reader_);
}

AndroidPublisherService::EditsResource::ListingsResource::ListingsResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_ListingsResource_DeleteMethod* AndroidPublisherService::EditsResource::ListingsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language) const {
  return new EditsResource_ListingsResource_DeleteMethod(service_, _credential_, package_name, edit_id, language);
}


EditsResource_ListingsResource_DeleteallMethod* AndroidPublisherService::EditsResource::ListingsResource::NewDeleteallMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_ListingsResource_DeleteallMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_ListingsResource_GetMethod* AndroidPublisherService::EditsResource::ListingsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language) const {
  return new EditsResource_ListingsResource_GetMethod(service_, _credential_, package_name, edit_id, language);
}


EditsResource_ListingsResource_ListMethod* AndroidPublisherService::EditsResource::ListingsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_ListingsResource_ListMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_ListingsResource_PatchMethod* AndroidPublisherService::EditsResource::ListingsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const Listing& __request_content__) const {
  return new EditsResource_ListingsResource_PatchMethod(service_, _credential_, package_name, edit_id, language, __request_content__);
}


EditsResource_ListingsResource_UpdateMethod* AndroidPublisherService::EditsResource::ListingsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& language, const Listing& __request_content__) const {
  return new EditsResource_ListingsResource_UpdateMethod(service_, _credential_, package_name, edit_id, language, __request_content__);
}

AndroidPublisherService::EditsResource::TestersResource::TestersResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_TestersResource_GetMethod* AndroidPublisherService::EditsResource::TestersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track) const {
  return new EditsResource_TestersResource_GetMethod(service_, _credential_, package_name, edit_id, track);
}


EditsResource_TestersResource_PatchMethod* AndroidPublisherService::EditsResource::TestersResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Testers& __request_content__) const {
  return new EditsResource_TestersResource_PatchMethod(service_, _credential_, package_name, edit_id, track, __request_content__);
}


EditsResource_TestersResource_UpdateMethod* AndroidPublisherService::EditsResource::TestersResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Testers& __request_content__) const {
  return new EditsResource_TestersResource_UpdateMethod(service_, _credential_, package_name, edit_id, track, __request_content__);
}

AndroidPublisherService::EditsResource::TracksResource::TracksResource(AndroidPublisherService* service)
  : service_(service) {
}



EditsResource_TracksResource_GetMethod* AndroidPublisherService::EditsResource::TracksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track) const {
  return new EditsResource_TracksResource_GetMethod(service_, _credential_, package_name, edit_id, track);
}


EditsResource_TracksResource_ListMethod* AndroidPublisherService::EditsResource::TracksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id) const {
  return new EditsResource_TracksResource_ListMethod(service_, _credential_, package_name, edit_id);
}


EditsResource_TracksResource_PatchMethod* AndroidPublisherService::EditsResource::TracksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Track& __request_content__) const {
  return new EditsResource_TracksResource_PatchMethod(service_, _credential_, package_name, edit_id, track, __request_content__);
}


EditsResource_TracksResource_UpdateMethod* AndroidPublisherService::EditsResource::TracksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& edit_id, const StringPiece& track, const Track& __request_content__) const {
  return new EditsResource_TracksResource_UpdateMethod(service_, _credential_, package_name, edit_id, track, __request_content__);
}

AndroidPublisherService::EntitlementsResource::EntitlementsResource(AndroidPublisherService* service)
  : service_(service) {
}



EntitlementsResource_ListMethod* AndroidPublisherService::EntitlementsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name) const {
  return new EntitlementsResource_ListMethod(service_, _credential_, package_name);
}

AndroidPublisherService::InappproductsResource::InappproductsResource(AndroidPublisherService* service)
  : service_(service) {
}



InappproductsResource_BatchMethod* AndroidPublisherService::InappproductsResource::NewBatchMethod(client::AuthorizationCredential* _credential_, const InappproductsBatchRequest& __request_content__) const {
  return new InappproductsResource_BatchMethod(service_, _credential_, __request_content__);
}


InappproductsResource_DeleteMethod* AndroidPublisherService::InappproductsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku) const {
  return new InappproductsResource_DeleteMethod(service_, _credential_, package_name, sku);
}


InappproductsResource_GetMethod* AndroidPublisherService::InappproductsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku) const {
  return new InappproductsResource_GetMethod(service_, _credential_, package_name, sku);
}


InappproductsResource_InsertMethod* AndroidPublisherService::InappproductsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const InAppProduct& __request_content__) const {
  return new InappproductsResource_InsertMethod(service_, _credential_, package_name, __request_content__);
}


InappproductsResource_ListMethod* AndroidPublisherService::InappproductsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name) const {
  return new InappproductsResource_ListMethod(service_, _credential_, package_name);
}


InappproductsResource_PatchMethod* AndroidPublisherService::InappproductsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku, const InAppProduct& __request_content__) const {
  return new InappproductsResource_PatchMethod(service_, _credential_, package_name, sku, __request_content__);
}


InappproductsResource_UpdateMethod* AndroidPublisherService::InappproductsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& sku, const InAppProduct& __request_content__) const {
  return new InappproductsResource_UpdateMethod(service_, _credential_, package_name, sku, __request_content__);
}

AndroidPublisherService::PurchasesResource::PurchasesResource(AndroidPublisherService* service)
  : service_(service), products_(service), subscriptions_(service), voidedpurchases_(service) {
}




AndroidPublisherService::PurchasesResource::ProductsResource::ProductsResource(AndroidPublisherService* service)
  : service_(service) {
}



PurchasesResource_ProductsResource_GetMethod* AndroidPublisherService::PurchasesResource::ProductsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& product_id, const StringPiece& token) const {
  return new PurchasesResource_ProductsResource_GetMethod(service_, _credential_, package_name, product_id, token);
}

AndroidPublisherService::PurchasesResource::SubscriptionsResource::SubscriptionsResource(AndroidPublisherService* service)
  : service_(service) {
}



PurchasesResource_SubscriptionsResource_CancelMethod* AndroidPublisherService::PurchasesResource::SubscriptionsResource::NewCancelMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token) const {
  return new PurchasesResource_SubscriptionsResource_CancelMethod(service_, _credential_, package_name, subscription_id, token);
}


PurchasesResource_SubscriptionsResource_DeferMethod* AndroidPublisherService::PurchasesResource::SubscriptionsResource::NewDeferMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token, const SubscriptionPurchasesDeferRequest& __request_content__) const {
  return new PurchasesResource_SubscriptionsResource_DeferMethod(service_, _credential_, package_name, subscription_id, token, __request_content__);
}


PurchasesResource_SubscriptionsResource_GetMethod* AndroidPublisherService::PurchasesResource::SubscriptionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token) const {
  return new PurchasesResource_SubscriptionsResource_GetMethod(service_, _credential_, package_name, subscription_id, token);
}


PurchasesResource_SubscriptionsResource_RefundMethod* AndroidPublisherService::PurchasesResource::SubscriptionsResource::NewRefundMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token) const {
  return new PurchasesResource_SubscriptionsResource_RefundMethod(service_, _credential_, package_name, subscription_id, token);
}


PurchasesResource_SubscriptionsResource_RevokeMethod* AndroidPublisherService::PurchasesResource::SubscriptionsResource::NewRevokeMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& subscription_id, const StringPiece& token) const {
  return new PurchasesResource_SubscriptionsResource_RevokeMethod(service_, _credential_, package_name, subscription_id, token);
}

AndroidPublisherService::PurchasesResource::VoidedpurchasesResource::VoidedpurchasesResource(AndroidPublisherService* service)
  : service_(service) {
}



PurchasesResource_VoidedpurchasesResource_ListMethod* AndroidPublisherService::PurchasesResource::VoidedpurchasesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name) const {
  return new PurchasesResource_VoidedpurchasesResource_ListMethod(service_, _credential_, package_name);
}

AndroidPublisherService::ReviewsResource::ReviewsResource(AndroidPublisherService* service)
  : service_(service) {
}



ReviewsResource_GetMethod* AndroidPublisherService::ReviewsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& review_id) const {
  return new ReviewsResource_GetMethod(service_, _credential_, package_name, review_id);
}


ReviewsResource_ListMethod* AndroidPublisherService::ReviewsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name) const {
  return new ReviewsResource_ListMethod(service_, _credential_, package_name);
}


ReviewsResource_ReplyMethod* AndroidPublisherService::ReviewsResource::NewReplyMethod(client::AuthorizationCredential* _credential_, const StringPiece& package_name, const StringPiece& review_id, const ReviewsReplyRequest& __request_content__) const {
  return new ReviewsResource_ReplyMethod(service_, _credential_, package_name, review_id, __request_content__);
}
}  // namespace google_androidpublisher_api
