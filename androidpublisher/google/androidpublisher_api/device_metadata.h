// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_DEVICE_METADATA_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_DEVICE_METADATA_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class DeviceMetadata : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static DeviceMetadata* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit DeviceMetadata(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit DeviceMetadata(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~DeviceMetadata();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::DeviceMetadata</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::DeviceMetadata");
  }

  /**
   * Determine if the '<code>cpuMake</code>' attribute was set.
   *
   * @return true if the '<code>cpuMake</code>' attribute was set.
   */
  bool has_cpu_make() const {
    return Storage().isMember("cpuMake");
  }

  /**
   * Clears the '<code>cpuMake</code>' attribute.
   */
  void clear_cpu_make() {
    MutableStorage()->removeMember("cpuMake");
  }


  /**
   * Get the value of the '<code>cpuMake</code>' attribute.
   */
  const StringPiece get_cpu_make() const {
    const Json::Value& v = Storage("cpuMake");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cpuMake</code>' attribute.
   *
   * Device CPU make e.g. "Qualcomm".
   *
   * @param[in] value The new value.
   */
  void set_cpu_make(const StringPiece& value) {
    *MutableStorage("cpuMake") = value.data();
  }

  /**
   * Determine if the '<code>cpuModel</code>' attribute was set.
   *
   * @return true if the '<code>cpuModel</code>' attribute was set.
   */
  bool has_cpu_model() const {
    return Storage().isMember("cpuModel");
  }

  /**
   * Clears the '<code>cpuModel</code>' attribute.
   */
  void clear_cpu_model() {
    MutableStorage()->removeMember("cpuModel");
  }


  /**
   * Get the value of the '<code>cpuModel</code>' attribute.
   */
  const StringPiece get_cpu_model() const {
    const Json::Value& v = Storage("cpuModel");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cpuModel</code>' attribute.
   *
   * Device CPU model e.g. "MSM8974".
   *
   * @param[in] value The new value.
   */
  void set_cpu_model(const StringPiece& value) {
    *MutableStorage("cpuModel") = value.data();
  }

  /**
   * Determine if the '<code>deviceClass</code>' attribute was set.
   *
   * @return true if the '<code>deviceClass</code>' attribute was set.
   */
  bool has_device_class() const {
    return Storage().isMember("deviceClass");
  }

  /**
   * Clears the '<code>deviceClass</code>' attribute.
   */
  void clear_device_class() {
    MutableStorage()->removeMember("deviceClass");
  }


  /**
   * Get the value of the '<code>deviceClass</code>' attribute.
   */
  const StringPiece get_device_class() const {
    const Json::Value& v = Storage("deviceClass");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>deviceClass</code>' attribute.
   *
   * Device class (e.g. tablet).
   *
   * @param[in] value The new value.
   */
  void set_device_class(const StringPiece& value) {
    *MutableStorage("deviceClass") = value.data();
  }

  /**
   * Determine if the '<code>glEsVersion</code>' attribute was set.
   *
   * @return true if the '<code>glEsVersion</code>' attribute was set.
   */
  bool has_gl_es_version() const {
    return Storage().isMember("glEsVersion");
  }

  /**
   * Clears the '<code>glEsVersion</code>' attribute.
   */
  void clear_gl_es_version() {
    MutableStorage()->removeMember("glEsVersion");
  }


  /**
   * Get the value of the '<code>glEsVersion</code>' attribute.
   */
  int32 get_gl_es_version() const {
    const Json::Value& storage = Storage("glEsVersion");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>glEsVersion</code>' attribute.
   *
   * OpenGL version.
   *
   * @param[in] value The new value.
   */
  void set_gl_es_version(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("glEsVersion"));
  }

  /**
   * Determine if the '<code>manufacturer</code>' attribute was set.
   *
   * @return true if the '<code>manufacturer</code>' attribute was set.
   */
  bool has_manufacturer() const {
    return Storage().isMember("manufacturer");
  }

  /**
   * Clears the '<code>manufacturer</code>' attribute.
   */
  void clear_manufacturer() {
    MutableStorage()->removeMember("manufacturer");
  }


  /**
   * Get the value of the '<code>manufacturer</code>' attribute.
   */
  const StringPiece get_manufacturer() const {
    const Json::Value& v = Storage("manufacturer");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>manufacturer</code>' attribute.
   *
   * Device manufacturer (e.g. Motorola).
   *
   * @param[in] value The new value.
   */
  void set_manufacturer(const StringPiece& value) {
    *MutableStorage("manufacturer") = value.data();
  }

  /**
   * Determine if the '<code>nativePlatform</code>' attribute was set.
   *
   * @return true if the '<code>nativePlatform</code>' attribute was set.
   */
  bool has_native_platform() const {
    return Storage().isMember("nativePlatform");
  }

  /**
   * Clears the '<code>nativePlatform</code>' attribute.
   */
  void clear_native_platform() {
    MutableStorage()->removeMember("nativePlatform");
  }


  /**
   * Get the value of the '<code>nativePlatform</code>' attribute.
   */
  const StringPiece get_native_platform() const {
    const Json::Value& v = Storage("nativePlatform");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nativePlatform</code>' attribute.
   *
   * Comma separated list of native platforms (e.g. "arm", "arm7").
   *
   * @param[in] value The new value.
   */
  void set_native_platform(const StringPiece& value) {
    *MutableStorage("nativePlatform") = value.data();
  }

  /**
   * Determine if the '<code>productName</code>' attribute was set.
   *
   * @return true if the '<code>productName</code>' attribute was set.
   */
  bool has_product_name() const {
    return Storage().isMember("productName");
  }

  /**
   * Clears the '<code>productName</code>' attribute.
   */
  void clear_product_name() {
    MutableStorage()->removeMember("productName");
  }


  /**
   * Get the value of the '<code>productName</code>' attribute.
   */
  const StringPiece get_product_name() const {
    const Json::Value& v = Storage("productName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>productName</code>' attribute.
   *
   * Device model name (e.g. Droid).
   *
   * @param[in] value The new value.
   */
  void set_product_name(const StringPiece& value) {
    *MutableStorage("productName") = value.data();
  }

  /**
   * Determine if the '<code>ramMb</code>' attribute was set.
   *
   * @return true if the '<code>ramMb</code>' attribute was set.
   */
  bool has_ram_mb() const {
    return Storage().isMember("ramMb");
  }

  /**
   * Clears the '<code>ramMb</code>' attribute.
   */
  void clear_ram_mb() {
    MutableStorage()->removeMember("ramMb");
  }


  /**
   * Get the value of the '<code>ramMb</code>' attribute.
   */
  int32 get_ram_mb() const {
    const Json::Value& storage = Storage("ramMb");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>ramMb</code>' attribute.
   *
   * Device RAM in Megabytes e.g. "2048".
   *
   * @param[in] value The new value.
   */
  void set_ram_mb(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("ramMb"));
  }

  /**
   * Determine if the '<code>screenDensityDpi</code>' attribute was set.
   *
   * @return true if the '<code>screenDensityDpi</code>' attribute was set.
   */
  bool has_screen_density_dpi() const {
    return Storage().isMember("screenDensityDpi");
  }

  /**
   * Clears the '<code>screenDensityDpi</code>' attribute.
   */
  void clear_screen_density_dpi() {
    MutableStorage()->removeMember("screenDensityDpi");
  }


  /**
   * Get the value of the '<code>screenDensityDpi</code>' attribute.
   */
  int32 get_screen_density_dpi() const {
    const Json::Value& storage = Storage("screenDensityDpi");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>screenDensityDpi</code>' attribute.
   *
   * Screen density in DPI.
   *
   * @param[in] value The new value.
   */
  void set_screen_density_dpi(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("screenDensityDpi"));
  }

  /**
   * Determine if the '<code>screenHeightPx</code>' attribute was set.
   *
   * @return true if the '<code>screenHeightPx</code>' attribute was set.
   */
  bool has_screen_height_px() const {
    return Storage().isMember("screenHeightPx");
  }

  /**
   * Clears the '<code>screenHeightPx</code>' attribute.
   */
  void clear_screen_height_px() {
    MutableStorage()->removeMember("screenHeightPx");
  }


  /**
   * Get the value of the '<code>screenHeightPx</code>' attribute.
   */
  int32 get_screen_height_px() const {
    const Json::Value& storage = Storage("screenHeightPx");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>screenHeightPx</code>' attribute.
   *
   * Screen height in pixels.
   *
   * @param[in] value The new value.
   */
  void set_screen_height_px(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("screenHeightPx"));
  }

  /**
   * Determine if the '<code>screenWidthPx</code>' attribute was set.
   *
   * @return true if the '<code>screenWidthPx</code>' attribute was set.
   */
  bool has_screen_width_px() const {
    return Storage().isMember("screenWidthPx");
  }

  /**
   * Clears the '<code>screenWidthPx</code>' attribute.
   */
  void clear_screen_width_px() {
    MutableStorage()->removeMember("screenWidthPx");
  }


  /**
   * Get the value of the '<code>screenWidthPx</code>' attribute.
   */
  int32 get_screen_width_px() const {
    const Json::Value& storage = Storage("screenWidthPx");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>screenWidthPx</code>' attribute.
   *
   * Screen width in pixels.
   *
   * @param[in] value The new value.
   */
  void set_screen_width_px(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("screenWidthPx"));
  }

 private:
  void operator=(const DeviceMetadata&);
};  // DeviceMetadata
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_DEVICE_METADATA_H_
