// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_SUBSCRIPTION_PURCHASE_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_SUBSCRIPTION_PURCHASE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * A SubscriptionPurchase resource indicates the status of a user's subscription
 * purchase.
 *
 * @ingroup DataObject
 */
class SubscriptionPurchase : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static SubscriptionPurchase* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SubscriptionPurchase(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SubscriptionPurchase(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~SubscriptionPurchase();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::SubscriptionPurchase</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::SubscriptionPurchase");
  }

  /**
   * Determine if the '<code>autoRenewing</code>' attribute was set.
   *
   * @return true if the '<code>autoRenewing</code>' attribute was set.
   */
  bool has_auto_renewing() const {
    return Storage().isMember("autoRenewing");
  }

  /**
   * Clears the '<code>autoRenewing</code>' attribute.
   */
  void clear_auto_renewing() {
    MutableStorage()->removeMember("autoRenewing");
  }


  /**
   * Get the value of the '<code>autoRenewing</code>' attribute.
   */
  bool get_auto_renewing() const {
    const Json::Value& storage = Storage("autoRenewing");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>autoRenewing</code>' attribute.
   *
   * Whether the subscription will automatically be renewed when it reaches its
   * current expiry time.
   *
   * @param[in] value The new value.
   */
  void set_auto_renewing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("autoRenewing"));
  }

  /**
   * Determine if the '<code>cancelReason</code>' attribute was set.
   *
   * @return true if the '<code>cancelReason</code>' attribute was set.
   */
  bool has_cancel_reason() const {
    return Storage().isMember("cancelReason");
  }

  /**
   * Clears the '<code>cancelReason</code>' attribute.
   */
  void clear_cancel_reason() {
    MutableStorage()->removeMember("cancelReason");
  }


  /**
   * Get the value of the '<code>cancelReason</code>' attribute.
   */
  int32 get_cancel_reason() const {
    const Json::Value& storage = Storage("cancelReason");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>cancelReason</code>' attribute.
   *
   * The reason why a subscription was cancelled or is not auto-renewing.
   * Possible values are:
   * - User cancelled the subscription
   * - Subscription was cancelled by the system, for example because of a
   * billing problem.
   *
   * @param[in] value The new value.
   */
  void set_cancel_reason(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("cancelReason"));
  }

  /**
   * Determine if the '<code>countryCode</code>' attribute was set.
   *
   * @return true if the '<code>countryCode</code>' attribute was set.
   */
  bool has_country_code() const {
    return Storage().isMember("countryCode");
  }

  /**
   * Clears the '<code>countryCode</code>' attribute.
   */
  void clear_country_code() {
    MutableStorage()->removeMember("countryCode");
  }


  /**
   * Get the value of the '<code>countryCode</code>' attribute.
   */
  const StringPiece get_country_code() const {
    const Json::Value& v = Storage("countryCode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>countryCode</code>' attribute.
   *
   * ISO 3166-1 alpha-2 billing country/region code of the user at the time the
   * subscription was granted.
   *
   * @param[in] value The new value.
   */
  void set_country_code(const StringPiece& value) {
    *MutableStorage("countryCode") = value.data();
  }

  /**
   * Determine if the '<code>developerPayload</code>' attribute was set.
   *
   * @return true if the '<code>developerPayload</code>' attribute was set.
   */
  bool has_developer_payload() const {
    return Storage().isMember("developerPayload");
  }

  /**
   * Clears the '<code>developerPayload</code>' attribute.
   */
  void clear_developer_payload() {
    MutableStorage()->removeMember("developerPayload");
  }


  /**
   * Get the value of the '<code>developerPayload</code>' attribute.
   */
  const StringPiece get_developer_payload() const {
    const Json::Value& v = Storage("developerPayload");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>developerPayload</code>' attribute.
   *
   * A developer-specified string that contains supplemental information about
   * an order.
   *
   * @param[in] value The new value.
   */
  void set_developer_payload(const StringPiece& value) {
    *MutableStorage("developerPayload") = value.data();
  }

  /**
   * Determine if the '<code>expiryTimeMillis</code>' attribute was set.
   *
   * @return true if the '<code>expiryTimeMillis</code>' attribute was set.
   */
  bool has_expiry_time_millis() const {
    return Storage().isMember("expiryTimeMillis");
  }

  /**
   * Clears the '<code>expiryTimeMillis</code>' attribute.
   */
  void clear_expiry_time_millis() {
    MutableStorage()->removeMember("expiryTimeMillis");
  }


  /**
   * Get the value of the '<code>expiryTimeMillis</code>' attribute.
   */
  int64 get_expiry_time_millis() const {
    const Json::Value& storage = Storage("expiryTimeMillis");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>expiryTimeMillis</code>' attribute.
   *
   * Time at which the subscription will expire, in milliseconds since the
   * Epoch.
   *
   * @param[in] value The new value.
   */
  void set_expiry_time_millis(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("expiryTimeMillis"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This kind represents a subscriptionPurchase object in the androidpublisher
   * service.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>orderId</code>' attribute was set.
   *
   * @return true if the '<code>orderId</code>' attribute was set.
   */
  bool has_order_id() const {
    return Storage().isMember("orderId");
  }

  /**
   * Clears the '<code>orderId</code>' attribute.
   */
  void clear_order_id() {
    MutableStorage()->removeMember("orderId");
  }


  /**
   * Get the value of the '<code>orderId</code>' attribute.
   */
  const StringPiece get_order_id() const {
    const Json::Value& v = Storage("orderId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>orderId</code>' attribute.
   *
   * The order id of the latest recurring order associated with the purchase of
   * the subscription.
   *
   * @param[in] value The new value.
   */
  void set_order_id(const StringPiece& value) {
    *MutableStorage("orderId") = value.data();
  }

  /**
   * Determine if the '<code>paymentState</code>' attribute was set.
   *
   * @return true if the '<code>paymentState</code>' attribute was set.
   */
  bool has_payment_state() const {
    return Storage().isMember("paymentState");
  }

  /**
   * Clears the '<code>paymentState</code>' attribute.
   */
  void clear_payment_state() {
    MutableStorage()->removeMember("paymentState");
  }


  /**
   * Get the value of the '<code>paymentState</code>' attribute.
   */
  int32 get_payment_state() const {
    const Json::Value& storage = Storage("paymentState");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>paymentState</code>' attribute.
   *
   * The payment state of the subscription. Possible values are:
   * - Payment pending
   * - Payment received
   * - Free trial.
   *
   * @param[in] value The new value.
   */
  void set_payment_state(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("paymentState"));
  }

  /**
   * Determine if the '<code>priceAmountMicros</code>' attribute was set.
   *
   * @return true if the '<code>priceAmountMicros</code>' attribute was set.
   */
  bool has_price_amount_micros() const {
    return Storage().isMember("priceAmountMicros");
  }

  /**
   * Clears the '<code>priceAmountMicros</code>' attribute.
   */
  void clear_price_amount_micros() {
    MutableStorage()->removeMember("priceAmountMicros");
  }


  /**
   * Get the value of the '<code>priceAmountMicros</code>' attribute.
   */
  int64 get_price_amount_micros() const {
    const Json::Value& storage = Storage("priceAmountMicros");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>priceAmountMicros</code>' attribute.
   *
   * Price of the subscription, not including tax. Price is expressed in micro-
   * units, where 1,000,000 micro-units represents one unit of the currency. For
   * example, if the subscription price is €1.99, price_amount_micros is
   * 1990000.
   *
   * @param[in] value The new value.
   */
  void set_price_amount_micros(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("priceAmountMicros"));
  }

  /**
   * Determine if the '<code>priceCurrencyCode</code>' attribute was set.
   *
   * @return true if the '<code>priceCurrencyCode</code>' attribute was set.
   */
  bool has_price_currency_code() const {
    return Storage().isMember("priceCurrencyCode");
  }

  /**
   * Clears the '<code>priceCurrencyCode</code>' attribute.
   */
  void clear_price_currency_code() {
    MutableStorage()->removeMember("priceCurrencyCode");
  }


  /**
   * Get the value of the '<code>priceCurrencyCode</code>' attribute.
   */
  const StringPiece get_price_currency_code() const {
    const Json::Value& v = Storage("priceCurrencyCode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>priceCurrencyCode</code>' attribute.
   *
   * ISO 4217 currency code for the subscription price. For example, if the
   * price is specified in British pounds sterling, price_currency_code is
   * "GBP".
   *
   * @param[in] value The new value.
   */
  void set_price_currency_code(const StringPiece& value) {
    *MutableStorage("priceCurrencyCode") = value.data();
  }

  /**
   * Determine if the '<code>startTimeMillis</code>' attribute was set.
   *
   * @return true if the '<code>startTimeMillis</code>' attribute was set.
   */
  bool has_start_time_millis() const {
    return Storage().isMember("startTimeMillis");
  }

  /**
   * Clears the '<code>startTimeMillis</code>' attribute.
   */
  void clear_start_time_millis() {
    MutableStorage()->removeMember("startTimeMillis");
  }


  /**
   * Get the value of the '<code>startTimeMillis</code>' attribute.
   */
  int64 get_start_time_millis() const {
    const Json::Value& storage = Storage("startTimeMillis");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>startTimeMillis</code>' attribute.
   *
   * Time at which the subscription was granted, in milliseconds since the
   * Epoch.
   *
   * @param[in] value The new value.
   */
  void set_start_time_millis(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("startTimeMillis"));
  }

  /**
   * Determine if the '<code>userCancellationTimeMillis</code>' attribute was
   * set.
   *
   * @return true if the '<code>userCancellationTimeMillis</code>' attribute was
   * set.
   */
  bool has_user_cancellation_time_millis() const {
    return Storage().isMember("userCancellationTimeMillis");
  }

  /**
   * Clears the '<code>userCancellationTimeMillis</code>' attribute.
   */
  void clear_user_cancellation_time_millis() {
    MutableStorage()->removeMember("userCancellationTimeMillis");
  }


  /**
   * Get the value of the '<code>userCancellationTimeMillis</code>' attribute.
   */
  int64 get_user_cancellation_time_millis() const {
    const Json::Value& storage = Storage("userCancellationTimeMillis");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>userCancellationTimeMillis</code>' attribute.
   *
   * The time at which the subscription was canceled by the user, in
   * milliseconds since the epoch. Only present if cancelReason is 0.
   *
   * @param[in] value The new value.
   */
  void set_user_cancellation_time_millis(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("userCancellationTimeMillis"));
  }

 private:
  void operator=(const SubscriptionPurchase&);
};  // SubscriptionPurchase
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_SUBSCRIPTION_PURCHASE_H_
