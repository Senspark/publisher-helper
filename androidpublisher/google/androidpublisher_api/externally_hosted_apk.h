// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_EXTERNALLY_HOSTED_APK_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_EXTERNALLY_HOSTED_APK_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/androidpublisher_api/externally_hosted_apk_uses_permission.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * Defines an APK available for this application that is hosted externally and
 * not uploaded to Google Play. This function is only available to enterprises
 * who are using Google Play for Work, and whos application is restricted to the
 * enterprise private channel.
 *
 * @ingroup DataObject
 */
class ExternallyHostedApk : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ExternallyHostedApk* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ExternallyHostedApk(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ExternallyHostedApk(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ExternallyHostedApk();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::ExternallyHostedApk</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::ExternallyHostedApk");
  }

  /**
   * Determine if the '<code>applicationLabel</code>' attribute was set.
   *
   * @return true if the '<code>applicationLabel</code>' attribute was set.
   */
  bool has_application_label() const {
    return Storage().isMember("applicationLabel");
  }

  /**
   * Clears the '<code>applicationLabel</code>' attribute.
   */
  void clear_application_label() {
    MutableStorage()->removeMember("applicationLabel");
  }


  /**
   * Get the value of the '<code>applicationLabel</code>' attribute.
   */
  const StringPiece get_application_label() const {
    const Json::Value& v = Storage("applicationLabel");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>applicationLabel</code>' attribute.
   *
   * The application label.
   *
   * @param[in] value The new value.
   */
  void set_application_label(const StringPiece& value) {
    *MutableStorage("applicationLabel") = value.data();
  }

  /**
   * Determine if the '<code>certificateBase64s</code>' attribute was set.
   *
   * @return true if the '<code>certificateBase64s</code>' attribute was set.
   */
  bool has_certificate_base64s() const {
    return Storage().isMember("certificateBase64s");
  }

  /**
   * Clears the '<code>certificateBase64s</code>' attribute.
   */
  void clear_certificate_base64s() {
    MutableStorage()->removeMember("certificateBase64s");
  }


  /**
   * Get a reference to the value of the '<code>certificateBase64s</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_certificate_base64s() const {
     const Json::Value& storage = Storage("certificateBase64s");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>certificateBase64s</code>' property.
   *
   * A certificate (or array of certificates if a certificate-chain is used)
   * used to signed this APK, represented as a base64 encoded byte array.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_certificateBase64s() {
    Json::Value* storage = MutableStorage("certificateBase64s");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>externallyHostedUrl</code>' attribute was set.
   *
   * @return true if the '<code>externallyHostedUrl</code>' attribute was set.
   */
  bool has_externally_hosted_url() const {
    return Storage().isMember("externallyHostedUrl");
  }

  /**
   * Clears the '<code>externallyHostedUrl</code>' attribute.
   */
  void clear_externally_hosted_url() {
    MutableStorage()->removeMember("externallyHostedUrl");
  }


  /**
   * Get the value of the '<code>externallyHostedUrl</code>' attribute.
   */
  const StringPiece get_externally_hosted_url() const {
    const Json::Value& v = Storage("externallyHostedUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>externallyHostedUrl</code>' attribute.
   *
   * The URL at which the APK is hosted. This must be an https URL.
   *
   * @param[in] value The new value.
   */
  void set_externally_hosted_url(const StringPiece& value) {
    *MutableStorage("externallyHostedUrl") = value.data();
  }

  /**
   * Determine if the '<code>fileSha1Base64</code>' attribute was set.
   *
   * @return true if the '<code>fileSha1Base64</code>' attribute was set.
   */
  bool has_file_sha1_base64() const {
    return Storage().isMember("fileSha1Base64");
  }

  /**
   * Clears the '<code>fileSha1Base64</code>' attribute.
   */
  void clear_file_sha1_base64() {
    MutableStorage()->removeMember("fileSha1Base64");
  }


  /**
   * Get the value of the '<code>fileSha1Base64</code>' attribute.
   */
  const StringPiece get_file_sha1_base64() const {
    const Json::Value& v = Storage("fileSha1Base64");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fileSha1Base64</code>' attribute.
   *
   * The SHA1 checksum of this APK, represented as a base64 encoded byte array.
   *
   * @param[in] value The new value.
   */
  void set_file_sha1_base64(const StringPiece& value) {
    *MutableStorage("fileSha1Base64") = value.data();
  }

  /**
   * Determine if the '<code>fileSha256Base64</code>' attribute was set.
   *
   * @return true if the '<code>fileSha256Base64</code>' attribute was set.
   */
  bool has_file_sha256_base64() const {
    return Storage().isMember("fileSha256Base64");
  }

  /**
   * Clears the '<code>fileSha256Base64</code>' attribute.
   */
  void clear_file_sha256_base64() {
    MutableStorage()->removeMember("fileSha256Base64");
  }


  /**
   * Get the value of the '<code>fileSha256Base64</code>' attribute.
   */
  const StringPiece get_file_sha256_base64() const {
    const Json::Value& v = Storage("fileSha256Base64");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fileSha256Base64</code>' attribute.
   *
   * The SHA256 checksum of this APK, represented as a base64 encoded byte
   * array.
   *
   * @param[in] value The new value.
   */
  void set_file_sha256_base64(const StringPiece& value) {
    *MutableStorage("fileSha256Base64") = value.data();
  }

  /**
   * Determine if the '<code>fileSize</code>' attribute was set.
   *
   * @return true if the '<code>fileSize</code>' attribute was set.
   */
  bool has_file_size() const {
    return Storage().isMember("fileSize");
  }

  /**
   * Clears the '<code>fileSize</code>' attribute.
   */
  void clear_file_size() {
    MutableStorage()->removeMember("fileSize");
  }


  /**
   * Get the value of the '<code>fileSize</code>' attribute.
   */
  int64 get_file_size() const {
    const Json::Value& storage = Storage("fileSize");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>fileSize</code>' attribute.
   *
   * The file size in bytes of this APK.
   *
   * @param[in] value The new value.
   */
  void set_file_size(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("fileSize"));
  }

  /**
   * Determine if the '<code>iconBase64</code>' attribute was set.
   *
   * @return true if the '<code>iconBase64</code>' attribute was set.
   */
  bool has_icon_base64() const {
    return Storage().isMember("iconBase64");
  }

  /**
   * Clears the '<code>iconBase64</code>' attribute.
   */
  void clear_icon_base64() {
    MutableStorage()->removeMember("iconBase64");
  }


  /**
   * Get the value of the '<code>iconBase64</code>' attribute.
   */
  const StringPiece get_icon_base64() const {
    const Json::Value& v = Storage("iconBase64");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>iconBase64</code>' attribute.
   *
   * The icon image from the APK, as a base64 encoded byte array.
   *
   * @param[in] value The new value.
   */
  void set_icon_base64(const StringPiece& value) {
    *MutableStorage("iconBase64") = value.data();
  }

  /**
   * Determine if the '<code>maximumSdk</code>' attribute was set.
   *
   * @return true if the '<code>maximumSdk</code>' attribute was set.
   */
  bool has_maximum_sdk() const {
    return Storage().isMember("maximumSdk");
  }

  /**
   * Clears the '<code>maximumSdk</code>' attribute.
   */
  void clear_maximum_sdk() {
    MutableStorage()->removeMember("maximumSdk");
  }


  /**
   * Get the value of the '<code>maximumSdk</code>' attribute.
   */
  int32 get_maximum_sdk() const {
    const Json::Value& storage = Storage("maximumSdk");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maximumSdk</code>' attribute.
   *
   * The maximum SDK supported by this APK (optional).
   *
   * @param[in] value The new value.
   */
  void set_maximum_sdk(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maximumSdk"));
  }

  /**
   * Determine if the '<code>minimumSdk</code>' attribute was set.
   *
   * @return true if the '<code>minimumSdk</code>' attribute was set.
   */
  bool has_minimum_sdk() const {
    return Storage().isMember("minimumSdk");
  }

  /**
   * Clears the '<code>minimumSdk</code>' attribute.
   */
  void clear_minimum_sdk() {
    MutableStorage()->removeMember("minimumSdk");
  }


  /**
   * Get the value of the '<code>minimumSdk</code>' attribute.
   */
  int32 get_minimum_sdk() const {
    const Json::Value& storage = Storage("minimumSdk");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>minimumSdk</code>' attribute.
   *
   * The minimum SDK targeted by this APK.
   *
   * @param[in] value The new value.
   */
  void set_minimum_sdk(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("minimumSdk"));
  }

  /**
   * Determine if the '<code>nativeCodes</code>' attribute was set.
   *
   * @return true if the '<code>nativeCodes</code>' attribute was set.
   */
  bool has_native_codes() const {
    return Storage().isMember("nativeCodes");
  }

  /**
   * Clears the '<code>nativeCodes</code>' attribute.
   */
  void clear_native_codes() {
    MutableStorage()->removeMember("nativeCodes");
  }


  /**
   * Get a reference to the value of the '<code>nativeCodes</code>' attribute.
   */
  const client::JsonCppArray<string > get_native_codes() const {
     const Json::Value& storage = Storage("nativeCodes");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>nativeCodes</code>'
   * property.
   *
   * The native code environments supported by this APK (optional).
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_nativeCodes() {
    Json::Value* storage = MutableStorage("nativeCodes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>packageName</code>' attribute was set.
   *
   * @return true if the '<code>packageName</code>' attribute was set.
   */
  bool has_package_name() const {
    return Storage().isMember("packageName");
  }

  /**
   * Clears the '<code>packageName</code>' attribute.
   */
  void clear_package_name() {
    MutableStorage()->removeMember("packageName");
  }


  /**
   * Get the value of the '<code>packageName</code>' attribute.
   */
  const StringPiece get_package_name() const {
    const Json::Value& v = Storage("packageName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>packageName</code>' attribute.
   *
   * The package name.
   *
   * @param[in] value The new value.
   */
  void set_package_name(const StringPiece& value) {
    *MutableStorage("packageName") = value.data();
  }

  /**
   * Determine if the '<code>usesFeatures</code>' attribute was set.
   *
   * @return true if the '<code>usesFeatures</code>' attribute was set.
   */
  bool has_uses_features() const {
    return Storage().isMember("usesFeatures");
  }

  /**
   * Clears the '<code>usesFeatures</code>' attribute.
   */
  void clear_uses_features() {
    MutableStorage()->removeMember("usesFeatures");
  }


  /**
   * Get a reference to the value of the '<code>usesFeatures</code>' attribute.
   */
  const client::JsonCppArray<string > get_uses_features() const {
     const Json::Value& storage = Storage("usesFeatures");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>usesFeatures</code>'
   * property.
   *
   * The features required by this APK (optional).
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_usesFeatures() {
    Json::Value* storage = MutableStorage("usesFeatures");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>usesPermissions</code>' attribute was set.
   *
   * @return true if the '<code>usesPermissions</code>' attribute was set.
   */
  bool has_uses_permissions() const {
    return Storage().isMember("usesPermissions");
  }

  /**
   * Clears the '<code>usesPermissions</code>' attribute.
   */
  void clear_uses_permissions() {
    MutableStorage()->removeMember("usesPermissions");
  }


  /**
   * Get a reference to the value of the '<code>usesPermissions</code>'
   * attribute.
   */
  const client::JsonCppArray<ExternallyHostedApkUsesPermission > get_uses_permissions() const;

  /**
   * Gets a reference to a mutable value of the '<code>usesPermissions</code>'
   * property.
   *
   * The permissions requested by this APK.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<ExternallyHostedApkUsesPermission > mutable_usesPermissions();

  /**
   * Determine if the '<code>versionCode</code>' attribute was set.
   *
   * @return true if the '<code>versionCode</code>' attribute was set.
   */
  bool has_version_code() const {
    return Storage().isMember("versionCode");
  }

  /**
   * Clears the '<code>versionCode</code>' attribute.
   */
  void clear_version_code() {
    MutableStorage()->removeMember("versionCode");
  }


  /**
   * Get the value of the '<code>versionCode</code>' attribute.
   */
  int32 get_version_code() const {
    const Json::Value& storage = Storage("versionCode");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>versionCode</code>' attribute.
   *
   * The version code of this APK.
   *
   * @param[in] value The new value.
   */
  void set_version_code(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("versionCode"));
  }

  /**
   * Determine if the '<code>versionName</code>' attribute was set.
   *
   * @return true if the '<code>versionName</code>' attribute was set.
   */
  bool has_version_name() const {
    return Storage().isMember("versionName");
  }

  /**
   * Clears the '<code>versionName</code>' attribute.
   */
  void clear_version_name() {
    MutableStorage()->removeMember("versionName");
  }


  /**
   * Get the value of the '<code>versionName</code>' attribute.
   */
  const StringPiece get_version_name() const {
    const Json::Value& v = Storage("versionName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>versionName</code>' attribute.
   *
   * The version name of this APK.
   *
   * @param[in] value The new value.
   */
  void set_version_name(const StringPiece& value) {
    *MutableStorage("versionName") = value.data();
  }

 private:
  void operator=(const ExternallyHostedApk&);
};  // ExternallyHostedApk
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_EXTERNALLY_HOSTED_APK_H_
