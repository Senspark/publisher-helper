// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_IN_APP_PRODUCT_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_IN_APP_PRODUCT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/androidpublisher_api/in_app_product_listing.h"
#include "google/androidpublisher_api/price.h"
#include "google/androidpublisher_api/season.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class InAppProduct : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static InAppProduct* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InAppProduct(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InAppProduct(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~InAppProduct();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::InAppProduct</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::InAppProduct");
  }

  /**
   * Determine if the '<code>defaultLanguage</code>' attribute was set.
   *
   * @return true if the '<code>defaultLanguage</code>' attribute was set.
   */
  bool has_default_language() const {
    return Storage().isMember("defaultLanguage");
  }

  /**
   * Clears the '<code>defaultLanguage</code>' attribute.
   */
  void clear_default_language() {
    MutableStorage()->removeMember("defaultLanguage");
  }


  /**
   * Get the value of the '<code>defaultLanguage</code>' attribute.
   */
  const StringPiece get_default_language() const {
    const Json::Value& v = Storage("defaultLanguage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>defaultLanguage</code>' attribute.
   *
   * The default language of the localized data, as defined by BCP 47. e.g. "en-
   * US", "en-GB".
   *
   * @param[in] value The new value.
   */
  void set_default_language(const StringPiece& value) {
    *MutableStorage("defaultLanguage") = value.data();
  }

  /**
   * Determine if the '<code>defaultPrice</code>' attribute was set.
   *
   * @return true if the '<code>defaultPrice</code>' attribute was set.
   */
  bool has_default_price() const {
    return Storage().isMember("defaultPrice");
  }

  /**
   * Clears the '<code>defaultPrice</code>' attribute.
   */
  void clear_default_price() {
    MutableStorage()->removeMember("defaultPrice");
  }


  /**
   * Get a reference to the value of the '<code>defaultPrice</code>' attribute.
   */
  const Price get_default_price() const;

  /**
   * Gets a reference to a mutable value of the '<code>defaultPrice</code>'
   * property.
   *
   * Default price cannot be zero. In-app products can never be free. Default
   * price is always in the developer's Checkout merchant currency.
   *
   * @return The result can be modified to change the attribute value.
   */
  Price mutable_defaultPrice();

  /**
   * Determine if the '<code>listings</code>' attribute was set.
   *
   * @return true if the '<code>listings</code>' attribute was set.
   */
  bool has_listings() const {
    return Storage().isMember("listings");
  }

  /**
   * Clears the '<code>listings</code>' attribute.
   */
  void clear_listings() {
    MutableStorage()->removeMember("listings");
  }


  /**
   * Get a reference to the value of the '<code>listings</code>' attribute.
   */
  const client::JsonCppAssociativeArray<InAppProductListing > get_listings() const;

  /**
   * Gets a reference to a mutable value of the '<code>listings</code>'
   * property.
   *
   * List of localized title and description data.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<InAppProductListing > mutable_listings();

  /**
   * Determine if the '<code>packageName</code>' attribute was set.
   *
   * @return true if the '<code>packageName</code>' attribute was set.
   */
  bool has_package_name() const {
    return Storage().isMember("packageName");
  }

  /**
   * Clears the '<code>packageName</code>' attribute.
   */
  void clear_package_name() {
    MutableStorage()->removeMember("packageName");
  }


  /**
   * Get the value of the '<code>packageName</code>' attribute.
   */
  const StringPiece get_package_name() const {
    const Json::Value& v = Storage("packageName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>packageName</code>' attribute.
   *
   * The package name of the parent app.
   *
   * @param[in] value The new value.
   */
  void set_package_name(const StringPiece& value) {
    *MutableStorage("packageName") = value.data();
  }

  /**
   * Determine if the '<code>prices</code>' attribute was set.
   *
   * @return true if the '<code>prices</code>' attribute was set.
   */
  bool has_prices() const {
    return Storage().isMember("prices");
  }

  /**
   * Clears the '<code>prices</code>' attribute.
   */
  void clear_prices() {
    MutableStorage()->removeMember("prices");
  }


  /**
   * Get a reference to the value of the '<code>prices</code>' attribute.
   */
  const client::JsonCppAssociativeArray<Price > get_prices() const;

  /**
   * Gets a reference to a mutable value of the '<code>prices</code>' property.
   *
   * Prices per buyer region. None of these prices should be zero. In-app
   * products can never be free.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<Price > mutable_prices();

  /**
   * Determine if the '<code>purchaseType</code>' attribute was set.
   *
   * @return true if the '<code>purchaseType</code>' attribute was set.
   */
  bool has_purchase_type() const {
    return Storage().isMember("purchaseType");
  }

  /**
   * Clears the '<code>purchaseType</code>' attribute.
   */
  void clear_purchase_type() {
    MutableStorage()->removeMember("purchaseType");
  }


  /**
   * Get the value of the '<code>purchaseType</code>' attribute.
   */
  const StringPiece get_purchase_type() const {
    const Json::Value& v = Storage("purchaseType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>purchaseType</code>' attribute.
   *
   * Purchase type enum value. Unmodifiable after creation.
   *
   * @param[in] value The new value.
   */
  void set_purchase_type(const StringPiece& value) {
    *MutableStorage("purchaseType") = value.data();
  }

  /**
   * Determine if the '<code>season</code>' attribute was set.
   *
   * @return true if the '<code>season</code>' attribute was set.
   */
  bool has_season() const {
    return Storage().isMember("season");
  }

  /**
   * Clears the '<code>season</code>' attribute.
   */
  void clear_season() {
    MutableStorage()->removeMember("season");
  }


  /**
   * Get a reference to the value of the '<code>season</code>' attribute.
   */
  const Season get_season() const;

  /**
   * Gets a reference to a mutable value of the '<code>season</code>' property.
   *
   * Definition of a season for a seasonal subscription. Can be defined only for
   * yearly subscriptions.
   *
   * @return The result can be modified to change the attribute value.
   */
  Season mutable_season();

  /**
   * Determine if the '<code>sku</code>' attribute was set.
   *
   * @return true if the '<code>sku</code>' attribute was set.
   */
  bool has_sku() const {
    return Storage().isMember("sku");
  }

  /**
   * Clears the '<code>sku</code>' attribute.
   */
  void clear_sku() {
    MutableStorage()->removeMember("sku");
  }


  /**
   * Get the value of the '<code>sku</code>' attribute.
   */
  const StringPiece get_sku() const {
    const Json::Value& v = Storage("sku");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sku</code>' attribute.
   *
   * The stock-keeping-unit (SKU) of the product, unique within an app.
   *
   * @param[in] value The new value.
   */
  void set_sku(const StringPiece& value) {
    *MutableStorage("sku") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>subscriptionPeriod</code>' attribute was set.
   *
   * @return true if the '<code>subscriptionPeriod</code>' attribute was set.
   */
  bool has_subscription_period() const {
    return Storage().isMember("subscriptionPeriod");
  }

  /**
   * Clears the '<code>subscriptionPeriod</code>' attribute.
   */
  void clear_subscription_period() {
    MutableStorage()->removeMember("subscriptionPeriod");
  }


  /**
   * Get the value of the '<code>subscriptionPeriod</code>' attribute.
   */
  const StringPiece get_subscription_period() const {
    const Json::Value& v = Storage("subscriptionPeriod");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>subscriptionPeriod</code>' attribute.
   *
   * Subscription period, specified in ISO 8601 format. Acceptable values are
   * "P1W" (one week), "P1M" (one month), "P3M" (three months), "P6M" (six
   * months), and "P1Y" (one year).
   *
   * @param[in] value The new value.
   */
  void set_subscription_period(const StringPiece& value) {
    *MutableStorage("subscriptionPeriod") = value.data();
  }

  /**
   * Determine if the '<code>trialPeriod</code>' attribute was set.
   *
   * @return true if the '<code>trialPeriod</code>' attribute was set.
   */
  bool has_trial_period() const {
    return Storage().isMember("trialPeriod");
  }

  /**
   * Clears the '<code>trialPeriod</code>' attribute.
   */
  void clear_trial_period() {
    MutableStorage()->removeMember("trialPeriod");
  }


  /**
   * Get the value of the '<code>trialPeriod</code>' attribute.
   */
  const StringPiece get_trial_period() const {
    const Json::Value& v = Storage("trialPeriod");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>trialPeriod</code>' attribute.
   *
   * Trial period, specified in ISO 8601 format. Acceptable values are anything
   * between "P7D" (seven days) and "P999D" (999 days). Seasonal subscriptions
   * cannot have a trial period.
   *
   * @param[in] value The new value.
   */
  void set_trial_period(const StringPiece& value) {
    *MutableStorage("trialPeriod") = value.data();
  }

 private:
  void operator=(const InAppProduct&);
};  // InAppProduct
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_IN_APP_PRODUCT_H_
