// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-02-15 17:18:02 UTC
//   on: 2017-08-09, 13:29:24 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Play Developer API (androidpublisher/v2)
// Generated from:
//   Version: v2
//   Revision: 45
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_ANDROIDPUBLISHER_API_USER_COMMENT_H_
#define  GOOGLE_ANDROIDPUBLISHER_API_USER_COMMENT_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/androidpublisher_api/device_metadata.h"
#include "google/androidpublisher_api/timestamp.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_androidpublisher_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class UserComment : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UserComment* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UserComment(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UserComment(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UserComment();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_androidpublisher_api::UserComment</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_androidpublisher_api::UserComment");
  }

  /**
   * Determine if the '<code>androidOsVersion</code>' attribute was set.
   *
   * @return true if the '<code>androidOsVersion</code>' attribute was set.
   */
  bool has_android_os_version() const {
    return Storage().isMember("androidOsVersion");
  }

  /**
   * Clears the '<code>androidOsVersion</code>' attribute.
   */
  void clear_android_os_version() {
    MutableStorage()->removeMember("androidOsVersion");
  }


  /**
   * Get the value of the '<code>androidOsVersion</code>' attribute.
   */
  int32 get_android_os_version() const {
    const Json::Value& storage = Storage("androidOsVersion");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>androidOsVersion</code>' attribute.
   *
   * Integer Android SDK version of the user's device at the time the review was
   * written, e.g. 23 is Marshmallow. May be absent.
   *
   * @param[in] value The new value.
   */
  void set_android_os_version(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("androidOsVersion"));
  }

  /**
   * Determine if the '<code>appVersionCode</code>' attribute was set.
   *
   * @return true if the '<code>appVersionCode</code>' attribute was set.
   */
  bool has_app_version_code() const {
    return Storage().isMember("appVersionCode");
  }

  /**
   * Clears the '<code>appVersionCode</code>' attribute.
   */
  void clear_app_version_code() {
    MutableStorage()->removeMember("appVersionCode");
  }


  /**
   * Get the value of the '<code>appVersionCode</code>' attribute.
   */
  int32 get_app_version_code() const {
    const Json::Value& storage = Storage("appVersionCode");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>appVersionCode</code>' attribute.
   *
   * Integer version code of the app as installed at the time the review was
   * written. May be absent.
   *
   * @param[in] value The new value.
   */
  void set_app_version_code(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("appVersionCode"));
  }

  /**
   * Determine if the '<code>appVersionName</code>' attribute was set.
   *
   * @return true if the '<code>appVersionName</code>' attribute was set.
   */
  bool has_app_version_name() const {
    return Storage().isMember("appVersionName");
  }

  /**
   * Clears the '<code>appVersionName</code>' attribute.
   */
  void clear_app_version_name() {
    MutableStorage()->removeMember("appVersionName");
  }


  /**
   * Get the value of the '<code>appVersionName</code>' attribute.
   */
  const StringPiece get_app_version_name() const {
    const Json::Value& v = Storage("appVersionName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>appVersionName</code>' attribute.
   *
   * String version name of the app as installed at the time the review was
   * written. May be absent.
   *
   * @param[in] value The new value.
   */
  void set_app_version_name(const StringPiece& value) {
    *MutableStorage("appVersionName") = value.data();
  }

  /**
   * Determine if the '<code>device</code>' attribute was set.
   *
   * @return true if the '<code>device</code>' attribute was set.
   */
  bool has_device() const {
    return Storage().isMember("device");
  }

  /**
   * Clears the '<code>device</code>' attribute.
   */
  void clear_device() {
    MutableStorage()->removeMember("device");
  }


  /**
   * Get the value of the '<code>device</code>' attribute.
   */
  const StringPiece get_device() const {
    const Json::Value& v = Storage("device");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>device</code>' attribute.
   *
   * Codename for the reviewer's device, e.g. klte, flounder. May be absent.
   *
   * @param[in] value The new value.
   */
  void set_device(const StringPiece& value) {
    *MutableStorage("device") = value.data();
  }

  /**
   * Determine if the '<code>deviceMetadata</code>' attribute was set.
   *
   * @return true if the '<code>deviceMetadata</code>' attribute was set.
   */
  bool has_device_metadata() const {
    return Storage().isMember("deviceMetadata");
  }

  /**
   * Clears the '<code>deviceMetadata</code>' attribute.
   */
  void clear_device_metadata() {
    MutableStorage()->removeMember("deviceMetadata");
  }


  /**
   * Get a reference to the value of the '<code>deviceMetadata</code>'
   * attribute.
   */
  const DeviceMetadata get_device_metadata() const;

  /**
   * Gets a reference to a mutable value of the '<code>deviceMetadata</code>'
   * property.
   *
   * Some information about the characteristics of the user's device.
   *
   * @return The result can be modified to change the attribute value.
   */
  DeviceMetadata mutable_deviceMetadata();

  /**
   * Determine if the '<code>lastModified</code>' attribute was set.
   *
   * @return true if the '<code>lastModified</code>' attribute was set.
   */
  bool has_last_modified() const {
    return Storage().isMember("lastModified");
  }

  /**
   * Clears the '<code>lastModified</code>' attribute.
   */
  void clear_last_modified() {
    MutableStorage()->removeMember("lastModified");
  }


  /**
   * Get a reference to the value of the '<code>lastModified</code>' attribute.
   */
  const Timestamp get_last_modified() const;

  /**
   * Gets a reference to a mutable value of the '<code>lastModified</code>'
   * property.
   *
   * The last time at which this comment was updated.
   *
   * @return The result can be modified to change the attribute value.
   */
  Timestamp mutable_lastModified();

  /**
   * Determine if the '<code>originalText</code>' attribute was set.
   *
   * @return true if the '<code>originalText</code>' attribute was set.
   */
  bool has_original_text() const {
    return Storage().isMember("originalText");
  }

  /**
   * Clears the '<code>originalText</code>' attribute.
   */
  void clear_original_text() {
    MutableStorage()->removeMember("originalText");
  }


  /**
   * Get the value of the '<code>originalText</code>' attribute.
   */
  const StringPiece get_original_text() const {
    const Json::Value& v = Storage("originalText");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>originalText</code>' attribute.
   *
   * Untranslated text of the review, in the case where the review has been
   * translated. If the review has not been translated this is left blank.
   *
   * @param[in] value The new value.
   */
  void set_original_text(const StringPiece& value) {
    *MutableStorage("originalText") = value.data();
  }

  /**
   * Determine if the '<code>reviewerLanguage</code>' attribute was set.
   *
   * @return true if the '<code>reviewerLanguage</code>' attribute was set.
   */
  bool has_reviewer_language() const {
    return Storage().isMember("reviewerLanguage");
  }

  /**
   * Clears the '<code>reviewerLanguage</code>' attribute.
   */
  void clear_reviewer_language() {
    MutableStorage()->removeMember("reviewerLanguage");
  }


  /**
   * Get the value of the '<code>reviewerLanguage</code>' attribute.
   */
  const StringPiece get_reviewer_language() const {
    const Json::Value& v = Storage("reviewerLanguage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>reviewerLanguage</code>' attribute.
   *
   * Language code for the reviewer. This is taken from the device settings so
   * is not guaranteed to match the language the review is written in. May be
   * absent.
   *
   * @param[in] value The new value.
   */
  void set_reviewer_language(const StringPiece& value) {
    *MutableStorage("reviewerLanguage") = value.data();
  }

  /**
   * Determine if the '<code>starRating</code>' attribute was set.
   *
   * @return true if the '<code>starRating</code>' attribute was set.
   */
  bool has_star_rating() const {
    return Storage().isMember("starRating");
  }

  /**
   * Clears the '<code>starRating</code>' attribute.
   */
  void clear_star_rating() {
    MutableStorage()->removeMember("starRating");
  }


  /**
   * Get the value of the '<code>starRating</code>' attribute.
   */
  int32 get_star_rating() const {
    const Json::Value& storage = Storage("starRating");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>starRating</code>' attribute.
   *
   * The star rating associated with the review, from 1 to 5.
   *
   * @param[in] value The new value.
   */
  void set_star_rating(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("starRating"));
  }

  /**
   * Determine if the '<code>text</code>' attribute was set.
   *
   * @return true if the '<code>text</code>' attribute was set.
   */
  bool has_text() const {
    return Storage().isMember("text");
  }

  /**
   * Clears the '<code>text</code>' attribute.
   */
  void clear_text() {
    MutableStorage()->removeMember("text");
  }


  /**
   * Get the value of the '<code>text</code>' attribute.
   */
  const StringPiece get_text() const {
    const Json::Value& v = Storage("text");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>text</code>' attribute.
   *
   * The content of the comment, i.e. review body. In some cases users have been
   * able to write a review with separate title and body; in those cases the
   * title and body are concatenated and separated by a tab character.
   *
   * @param[in] value The new value.
   */
  void set_text(const StringPiece& value) {
    *MutableStorage("text") = value.data();
  }

  /**
   * Determine if the '<code>thumbsDownCount</code>' attribute was set.
   *
   * @return true if the '<code>thumbsDownCount</code>' attribute was set.
   */
  bool has_thumbs_down_count() const {
    return Storage().isMember("thumbsDownCount");
  }

  /**
   * Clears the '<code>thumbsDownCount</code>' attribute.
   */
  void clear_thumbs_down_count() {
    MutableStorage()->removeMember("thumbsDownCount");
  }


  /**
   * Get the value of the '<code>thumbsDownCount</code>' attribute.
   */
  int32 get_thumbs_down_count() const {
    const Json::Value& storage = Storage("thumbsDownCount");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>thumbsDownCount</code>' attribute.
   *
   * Number of users who have given this review a thumbs down.
   *
   * @param[in] value The new value.
   */
  void set_thumbs_down_count(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("thumbsDownCount"));
  }

  /**
   * Determine if the '<code>thumbsUpCount</code>' attribute was set.
   *
   * @return true if the '<code>thumbsUpCount</code>' attribute was set.
   */
  bool has_thumbs_up_count() const {
    return Storage().isMember("thumbsUpCount");
  }

  /**
   * Clears the '<code>thumbsUpCount</code>' attribute.
   */
  void clear_thumbs_up_count() {
    MutableStorage()->removeMember("thumbsUpCount");
  }


  /**
   * Get the value of the '<code>thumbsUpCount</code>' attribute.
   */
  int32 get_thumbs_up_count() const {
    const Json::Value& storage = Storage("thumbsUpCount");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>thumbsUpCount</code>' attribute.
   *
   * Number of users who have given this review a thumbs up.
   *
   * @param[in] value The new value.
   */
  void set_thumbs_up_count(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("thumbsUpCount"));
  }

 private:
  void operator=(const UserComment&);
};  // UserComment
}  // namespace google_androidpublisher_api
#endif  // GOOGLE_ANDROIDPUBLISHER_API_USER_COMMENT_H_
